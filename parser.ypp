%{
#include "hw3_output.hpp"
#include "nodes.hpp"
#include "symTable.hpp"
#include "codeGen.hpp"
#include "cg.hpp"

extern int yylex();
using namespace output;
using namespace std;
void yyerror(const char *s);
extern int yylineno;
extern CodeBuffer buffer;
extern codeGenerator code_gen;
extern symTableStack stacks;
vector<string> whileContinueLables;
vector<string> whileBreakLables;

%}



%nonassoc TYPE
%nonassoc ID
%nonassoc SC
%nonassoc RETURN
%nonassoc IF
%nonassoc WHILE
%nonassoc BREAK
%nonassoc CONTINUE
%nonassoc CALL
%nonassoc INT
%nonassoc BYTE
%nonassoc BOOL
%nonassoc NUM
%nonassoc B
%nonassoc STRING
%nonassoc TRUE
%nonassoc FALSE
%nonassoc LOWER_THAN_ELSE

%right ASSIGN
%left OR
%left AND
%left EQUALITY
%left RELATIONAL
%left ADD_AND_SUB
%left MULT_AND_DIV
%right NOT
%left LPAREN RPAREN LBRACE RBRACE
%right ELSE





%%

Program : Statements { $$ = new Program(); stacks.removeTable();}
;

Statements : Statement {new Statements(dynamic_cast<Statement*>($1));}
            | Statements Statement {new Statements(dynamic_cast<Statements*>($1),dynamic_cast<Statement*>($2));}
;

Statement : LBRACE {stacks.addTable(false);} Statements {stacks.removeTable();} RBRACE {$$ = new Statement(); delete $3;}
            | Type ID SC {$$ = new Statement(dynamic_cast<Type*>($1),$2);}
            | Type ID ASSIGN Exp SC {$$ = new Statement(dynamic_cast<Type*>($1),$2,dynamic_cast<Exp*>($4));  }
            | ID ASSIGN Exp SC {$$ = new Statement($1, dynamic_cast<Exp*>($3));}
            | Call SC { $$ = new Statement(dynamic_cast<Call*>($1)); }
            | RETURN SC {buffer.emit("ret i32 0"); } // nothing????
            | IFRuleBeginning Statement {$$ = new Statement(dynamic_cast<ifClass*>($1)->exp); stacks.removeTable(); buffer.emit("br label %" + dynamic_cast<ifClass*>($1)->label->false_label); buffer.emit(dynamic_cast<ifClass *>($1)->label->false_label + ":");} %prec LOWER_THAN_ELSE 
            | IFRuleBeginning Statement ELSE {stacks.removeTable(); buffer.emit("br label %" + dynamic_cast<ifClass*>($1)->label->next_label); buffer.emit(dynamic_cast<ifClass*>($1)->label->false_label + ":"); } OS Statement {$$ =  new Statement(dynamic_cast<ifClass*>($1)->exp); stacks.removeTable(); buffer.emit("br label %" + dynamic_cast<ifClass*>($1)->label->next_label); buffer.emit(dynamic_cast<ifClass*>($1)->label->next_label + ":"); }  //check bool for else?
            | WHILE LableWhile LPAREN IsBool RPAREN {whileBreakLables.push_back(dynamic_cast<Label *>($2)->false_label); whileContinueLables.push_back(dynamic_cast<Label *>($2)->next_label); stacks.addTable(true); buffer.emit("br i1 " + dynamic_cast<Exp *>($4)->reg + ", label %" + dynamic_cast<Label *>($2)->true_label + ", label %" + dynamic_cast<Label *>($2)->false_label); buffer.emit(dynamic_cast<Label *>($2)->true_label + ":"); } Statement {$$ =  new Statement(dynamic_cast<Exp*>($4)); buffer.emit(dynamic_cast<Label *>($2)->false_label + ":"); whileBreakLables.pop_back(); whileContinueLables.pop_back(); stacks.removeTable();}
            | BREAK SC { $$ = new Statement($1); code_gen.emitUnconditionalBranch( whileBreakLables.back() ); }
            | CONTINUE SC { $$ = new Statement($1); code_gen.emitUnconditionalBranch( whileContinueLables.back() ); }
;

Call : ID LPAREN Exp RPAREN { $$ = new Call($1, dynamic_cast<Exp*>($3)); }
;

Type : INT { $$ = new Type("int"); }
     | BYTE { $$ = new Type("byte"); }
     | BOOL { $$ = new Type("bool"); }
;

Exp : LPAREN Exp RPAREN { $$ = new Exp(dynamic_cast<Exp*>($2));}
    | Exp MULT_AND_DIV Exp { $$ = new Exp(dynamic_cast<Exp*>($1), dynamic_cast<Exp*>($3), "arithmetic",$2->val);}
    | Exp ADD_AND_SUB Exp { $$ = new Exp(dynamic_cast<Exp*>($1), dynamic_cast<Exp*>($3), "arithmetic",$2->val);}
    | ID { $$ = new Exp($1);}
    | Call { $$ = new Exp(dynamic_cast<Call*>($1)); }
    | NUM { $$ = new Exp("int", $1); }
    | NUM B { $$ = new Exp("byte", $1); }
    | STRING { $$ = new Exp("string", $1); }
    | TRUE { $$ = new Exp("bool", $1); }
    | FALSE { $$ = new Exp("bool", $1); }
    | NOT Exp { $$ = new Exp(dynamic_cast<Exp*>($2), "logic"); }
    | Exp AND Label 
    { code_gen.emitBranchCondition(dynamic_cast<Exp*>($1)->reg, dynamic_cast<Label*>($3)->true_label, dynamic_cast<Label*>($3)->false_label);
    code_gen.emitLabel(dynamic_cast<Label*>($3)->true_label); } 
    Exp 
    { $$ = new Exp(dynamic_cast<Exp*>($1), dynamic_cast<Exp*>($5), "logic",$2->val); 
    code_gen.emitBranchCondition(dynamic_cast<Exp*>($5)->reg, dynamic_cast<Label*>($3)->true_label2, dynamic_cast<Label*>($3)->false_label);
    code_gen.emitLabel(dynamic_cast<Label*>($3)->true_label2);
    code_gen.emitUnconditionalBranch(dynamic_cast<Label*>($3)->next_label);
    code_gen.emitLabel(dynamic_cast<Label*>($3)->false_label);
    code_gen.emitUnconditionalBranch(dynamic_cast<Label*>($3)->next_label);
    code_gen.emitLabel(dynamic_cast<Label*>($3)->next_label);
    dynamic_cast<Exp *>($$)->reg = code_gen.allocateReg(0); 
    code_gen.emitPhiNodeForExp(dynamic_cast<Exp *>($$)->reg, dynamic_cast<Label*>($3)->true_label2, dynamic_cast<Label*>($3)->false_label, dynamic_cast<Label*>($3)->next_label); }
    | Exp OR Label 
    { code_gen.emitBranchCondition(dynamic_cast<Exp*>($1)->reg, dynamic_cast<Label*>($3)->true_label, dynamic_cast<Label*>($3)->false_label);
    code_gen.emitLabel(dynamic_cast<Label*>($3)->false_label); } 
    Exp 
    { $$ = new Exp(dynamic_cast<Exp*>($1), dynamic_cast<Exp*>($5), "logic",$2->val); 
    code_gen.emitBranchCondition(dynamic_cast<Exp*>($5)->reg, dynamic_cast<Label*>($3)->true_label, dynamic_cast<Label*>($3)->false_label2);
    code_gen.emitLabel(dynamic_cast<Label*>($3)->false_label2);
    code_gen.emitUnconditionalBranch(dynamic_cast<Label*>($3)->next_label);
    code_gen.emitLabel(dynamic_cast<Label*>($3)->true_label);
    code_gen.emitUnconditionalBranch(dynamic_cast<Label*>($3)->next_label);
    code_gen.emitLabel(dynamic_cast<Label*>($3)->next_label);
    dynamic_cast<Exp *>($$)->reg = code_gen.allocateReg(0); 
    code_gen.emitPhiNodeForExp(dynamic_cast<Exp *>($$)->reg, dynamic_cast<Label*>($3)->true_label, dynamic_cast<Label*>($3)->false_label2, dynamic_cast<Label*>($3)->next_label); }
    | Exp EQUALITY Exp { $$ = new Exp(dynamic_cast<Exp*>($1), dynamic_cast<Exp*>($3), "relop",$2->val); }
    | Exp RELATIONAL Exp { $$ = new Exp(dynamic_cast<Exp*>($1), dynamic_cast<Exp*>($3), "relop",$2->val); }
    | LPAREN Type RPAREN Exp { $$ = new Exp(dynamic_cast<Exp*>($4), dynamic_cast<Type*>($2)); }
;

OS:                                                              {stacks.addTable(false);}
IsBool: Exp                                                      {check_bool($1);}
Label:                                                           {$$ = new Label();}
LableWhile:
                                                                 {$$ = new Label();
                                                                  buffer.emit("br label %" + dynamic_cast<Label *>($$)->next_label);
                                                                  buffer.emit(dynamic_cast<Label *>($$)->next_label + ":"); }
IFRuleBeginning: IF LPAREN IsBool RPAREN OS Label                {buffer.emit("br i1 " + dynamic_cast<Exp *>($3)->reg + ", label %" + dynamic_cast<Label *>($6)->true_label + ", label %" + dynamic_cast<Label *>($6)->false_label);
                                                                  $$ = new ifClass(dynamic_cast<Exp *>($3), dynamic_cast<Label *>($6));
                                                                  buffer.emit(dynamic_cast<Label *>($6)->true_label + ":"); }
%%

/* C code section */

symTableStack stacks = symTableStack();
codeGenerator code_gen = codeGenerator();
CodeBuffer buffer = CodeBuffer();

int main() {
    buffer.firstemits();
    buffer.emit("define i32 @main(){");
    stacks.rbp = code_gen.allocateReg(0);
    buffer.emit(stacks.rbp + " = alloca i32, i32 50");
    //-----more emits------------------------------------//
    int parser = yyparse();
    stacks.cleanUp();
    buffer.emit("ret i32 0");
    buffer.emit("}");
    //-----printing global defs and then the buffer------// 
    buffer.printGlobalBuffer();
    buffer.printCodeBuffer();
    return parser;
}

void yyerror(const char *s) {
    errorSyn(yylineno);
    exit(0);
}
