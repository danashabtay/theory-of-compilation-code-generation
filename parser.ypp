%{
#include "hw3_output.hpp"
#include "nodes.hpp"
#include "symTable.hpp"

extern int yylex();
using namespace output;
using namespace std;
void yyerror(const char *s);
extern int yylineno;
extern globalCode buffer;
extern CodeGen code_gen;
extern symTableStack stacks;
%}



%token TYPE
%token ID
%token SC
%token RETURN
%token IF
%token WHILE
%token BREAK
%token CONTINUE
%token CALL
%token INT
%token BYTE
%token BOOL
%token NUM
%token B
%token STRING
%token TRUE
%token FALSE

%right ASSIGN
%left OR
%left AND
%left EQUALITY
%left RELATIONAL
%left ADD_AND_SUB
%left MULT_AND_DIV
%right NOT
%left LPAREN RPAREN LBRACE RBRACE
%right ELSE





%%

Program : Statements { $$ = new Program(); stacks.removeTable();}
;

Statements : Statement {new Statements(dynamic_cast<Statement*>($1));}
            | Statements Statement {new Statements(dynamic_cast<Statements*>($1),dynamic_cast<Statement*>($2));}
;

Statement : LBRACE {stacks.addTable(false);} Statements {stacks.removeTable();} RBRACE 
            | Type ID SC {$$ = new Statement(dynamic_cast<Type*>($1),$2);}
            | Type ID ASSIGN Exp SC {$$ = new Statement(dynamic_cast<Type*>($1),$2,dynamic_cast<Exp*>($4));  }
            | ID ASSIGN Exp SC {$$ = new Statement($1, dynamic_cast<Exp*>($3));}
            | Call SC { }
            | RETURN SC { } // nothing????
            | IF LPAREN IsBool RPAREN OS Statement {$$ =  new Statement(dynamic_cast<Exp*>($3));stacks.removeTable();}  
            | IF LPAREN IsBool RPAREN OS Statement ELSE {stacks.removeTable();} OS Statement {$$ =  new Statement(dynamic_cast<Exp*>($3));stacks.removeTable();}  //check bool for else?
            | WHILE LPAREN IsBool RPAREN {stacks.addTable(true);} Statement {$$ =  new Statement(dynamic_cast<Exp*>($3));stacks.removeTable();}
            | BREAK SC { $$ = new Statement($1); }
            | CONTINUE SC { $$ = new Statement($1); }
;

Call : ID LPAREN Exp RPAREN { $$ = new Call($1, dynamic_cast<Exp*>($3)); }
;

Type : INT { $$ = new Type("int"); }
     | BYTE { $$ = new Type("byte"); }
     | BOOL { $$ = new Type("bool"); }
;

Exp : LPAREN Exp RPAREN { $$ = new Exp(dynamic_cast<Exp*>($2));}
    | Exp MULT_AND_DIV Exp { $$ = new Exp(dynamic_cast<Exp*>($1), dynamic_cast<Exp*>($3), "arithmetic",$2->val);}
    | Exp ADD_AND_SUB Exp { $$ = new Exp(dynamic_cast<Exp*>($1), dynamic_cast<Exp*>($3), "arithmetic",$2->val);}
    | ID { $$ = new Exp($1);}
    | Call { $$ = new Exp(dynamic_cast<Call*>($1)); }
    | NUM { $$ = new Exp("int", $1); }
    | NUM B { $$ = new Exp("byte", $1); }
    | STRING { $$ = new Exp("string", $1); }
    | TRUE { $$ = new Exp("bool", $1); }
    | FALSE { $$ = new Exp("bool", $1); }
    | NOT Exp { $$ = new Exp(dynamic_cast<Exp*>($2), "logic"); }
    | Exp AND Lable 
    { code_gen.emitBranchCondition(dynamic_cast<Exp*>($1)->reg, dynamic_cast<Label*>($3)->true_label, dynamic_cast<Label*>($3)->false_label);
    code_gen.emitLabel(dynamic_cast<Label*>($3)->true_label); } 
    Exp 
    { $$ = new Exp(dynamic_cast<Exp*>($1), dynamic_cast<Exp*>($3), "logic",$2->val); 
    code_gen.emitBranchCondition(dynamic_cast<Exp*>($5)->reg, dynamic_cast<Label*>($3)->true_label2, dynamic_cast<Label*>($3)->false_label);
    code_gen.emitLabel(dynamic_cast<Label*>($3)->true_label2);
    code_gen.emitUnconditionalBranch(dynamic_cast<Label*>($3)->next_label);
    code_gen.emitLabel(dynamic_cast<Label*>($3)->false_label);
    code_gen.emitUnconditionalBranch(dynamic_cast<Label*>($3)->next_label);
    code_gen.emitLabel(dynamic_cast<Label*>($3)->next_label);
    code_gen.emitPhiNodeForExp(code_gen.allocateReg(0), dynamic_cast<Label*>($3)->true_label2, dynamic_cast<Label*>($3)->false_label, dynamic_cast<Label*>($3)->next_label); }
    | Exp OR LABLE 
    { code_gen.emitBranchCondition(dynamic_cast<Exp*>($1)->reg, dynamic_cast<Label*>($3)->true_label, dynamic_cast<Label*>($3)->false_label);
    code_gen.emitLabel(dynamic_cast<Label*>($3)->false_label); } 
    Exp 
    { $$ = new Exp(dynamic_cast<Exp*>($1), dynamic_cast<Exp*>($3), "logic",$2->val); 
    code_gen.emitBranchCondition(dynamic_cast<Exp*>($5)->reg, dynamic_cast<Label*>($3)->true_label, dynamic_cast<Label*>($3)->false_label2);
    code_gen.emitLabel(dynamic_cast<Label*>($3)->false_label2);
    code_gen.emitUnconditionalBranch(dynamic_cast<Label*>($3)->next_label);
    code_gen.emitLabel(dynamic_cast<Label*>($3)->true_label);
    code_gen.emitUnconditionalBranch(dynamic_cast<Label*>($3)->next_label);
    code_gen.emitLabel(dynamic_cast<Label*>($3)->next_label); 
    code_gen.emitPhiNodeForExp(code_gen.allocateReg(0), dynamic_cast<Label*>($3)->true_label, dynamic_cast<Label*>($3)->false_label2, dynamic_cast<Label*>($3)->next_label); }
    | Exp EQUALITY Exp { $$ = new Exp(dynamic_cast<Exp*>($1), dynamic_cast<Exp*>($3), "relop",$2->val); }
    | Exp RELATIONAL Exp { $$ = new Exp(dynamic_cast<Exp*>($1), dynamic_cast<Exp*>($3), "relop",$2->val); }
    | LPAREN Type RPAREN Exp { $$ = new Exp(dynamic_cast<Exp*>($4), dynamic_cast<Type*>($2)); }
;

OS:                                                              {stacks.addTable(false);}
IsBool: Exp                                                      {check_bool($1);}
Label:                                                           {$$ = new Label();}

%%

/* C code section */

symTableStack stacks = symTableStack();
codeGen code_gen = codeGen();
CodeBuffer buffer = CodeBuffer();

int main() {
    buffer.firstemits();
    buffer.emit("define i32 @main(){");
    stacks.rbp = Code_gen.allocateReg(0);
    buffer.emit(stacks.rbp + " = alloca i32, i32 50");
    //-----more emits------------------------------------//
    int parser = yyparse();
    stacks.cleanUp();
    buffer.emit("ret i32 0");
    buffer.emit("}");
    //-----printing global defs and then the buffer------// 
    buffer.printGlobalBuffer();
    buffer.printCodeBuffer();
    return parser;
}

void yyerror(const char *s) {
    errorSyn(yylineno);
    exit(0);
}
